# [description]
# Use all 6 clip planes to clip a rectangle to a hexagon shape, and
# verify that gl_BackColor is still properly interpolated on the
# clipped region.
#
# In this test, gl_Position, gl_ClipVertex, and gl_Vertex are the same.
#
# The vertex shader writes to gl_PointSize, because this provokes some
# failures on i965-based drivers.

[require]
GLSL >= 1.20

[vertex shader]
#version 120
void main(void)
{
	vec4 vertex = gl_Vertex;
	vertex.x = -vertex.x; /* So that we see the back side of the rectangle */
	gl_Position = vertex;

	gl_ClipVertex = gl_Position;

	float x_r = (vertex.x + 1.0)/2.0; /* Ranges from 0 to 1 */
	float y_r = (vertex.y + 1.0)/2.0; /* Ranges from 0 to 1 */

	gl_FrontColor = vec4(1.0);
	gl_BackColor = vec4(x_r, y_r, 1.0-x_r, 1.0-y_r);
	gl_PointSize = 1.0;
}

[fragment shader]
#version 120
void main(void)
{
	gl_FragColor = gl_Color;
}

[test]
# I think this is all that should be needed to enable two-sided color.
enable GL_VERTEX_PROGRAM_TWO_SIDE

# But mesa seems to require these too:
enable GL_LIGHTING
set GL_LIGHT_MODEL_TWO_SIDE 1

clip plane 0 0 1 0 0.5
clip plane 1 -1 1 0 0.8
clip plane 2 -1 -1 0 0.8
clip plane 3 0 -1 0 0.5
clip plane 4 1 -1 0 0.8
clip plane 5 1 1 0 0.8
enable GL_CLIP_PLANE0
enable GL_CLIP_PLANE1
enable GL_CLIP_PLANE2
enable GL_CLIP_PLANE3
enable GL_CLIP_PLANE4
enable GL_CLIP_PLANE5
draw rect -0.8 -0.8 1.6 1.6

# Test points inside each hexagon edge
relative probe rgba (0.3, 0.4) (0.3, 0.4, 0.7, 0.6)
relative probe rgba (0.5, 0.3) (0.5, 0.3, 0.5, 0.7)
relative probe rgba (0.7, 0.4) (0.7, 0.4, 0.3, 0.6)
relative probe rgba (0.7, 0.6) (0.7, 0.6, 0.3, 0.4)
relative probe rgba (0.5, 0.7) (0.5, 0.7, 0.5, 0.3)
relative probe rgba (0.3, 0.6) (0.3, 0.6, 0.7, 0.4)

# Test points outside each hexagon edge
relative probe rgba (0.2, 0.3) (0.0, 0.0, 0.0, 0.0)
relative probe rgba (0.5, 0.2) (0.0, 0.0, 0.0, 0.0)
relative probe rgba (0.8, 0.3) (0.0, 0.0, 0.0, 0.0)
relative probe rgba (0.8, 0.7) (0.0, 0.0, 0.0, 0.0)
relative probe rgba (0.5, 0.8) (0.0, 0.0, 0.0, 0.0)
relative probe rgba (0.2, 0.7) (0.0, 0.0, 0.0, 0.0)
