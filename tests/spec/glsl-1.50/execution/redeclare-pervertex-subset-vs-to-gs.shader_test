# From section 7.1 (Built-In Language Variables) of the GLSL 4.10
# spec:
#
#   The gl_PerVertex block can be redeclared in a shader to explicitly
#   indicate what subset of the fixed pipeline interface will be
#   used. This is necessary to establish the interface between multiple
#   programs.  For example:
#
#   out gl_PerVertex {
#       vec4 gl_Position;    // will use gl_Position
#       float gl_PointSize;  // will use gl_PointSize
#       vec4 t;              // error, only gl_PerVertex members allowed
#   };  // no other members of gl_PerVertex will be used
#
#   This establishes the output interface the shader will use with the
#   subsequent pipeline stage. It must be a subset of the built-in members
#   of gl_PerVertex.
#
# Furthermore, section 7.1.1 (Compatibility Profile Built-In Language
# Variables) says:
#
#   In the tessellation control, evaluation, and geometry shaders, the
#   outputs of the previous stage described above are also available
#   in the input gl_PerVertex block in these languages.
#
#   ...
#
#   These can be redeclared to establish an explicit pipeline
#   interface, the same way as described above for the output block
#   gl_PerVertex, and the input redeclaration must match the output
#   redeclaration of the previous stage. However, when a built-in
#   interface block with an instance name is redeclared (e.g., gl_in),
#   the instance name must be included in the redeclaration. It is an
#   error to not include the built-in instance name or to change its
#   name. For example,
#
#   in gl_PerVertex {
#       vec4  gl_ClipVertex;
#       vec4  gl_FrontColor;
#   } gl_in[];  // must be present and must be "gl_in[]"
#
# This appears to be a clarification to the behaviour established for
# gl_PerVertex by GLSL 1.50, therefore we test it using GLSL version
# 1.50.
#
# This test verifies that the vertex shader can redeclare the
# gl_PerVertex out block specifying a subset of the built-in values
# (gl_Position and gl_PointSize), and the geometry shader can
# redeclare the same subset for its gl_PerVertex in block, and the
# subset works.

[require]
GLSL >= 1.50

[vertex shader]
out gl_PerVertex {
    vec4 gl_Position;
    float gl_PointSize;
};

void main()
{
    gl_Position = 100.0 * gl_VertexID + vec4(0.0, 1.0, 2.0, 3.0);
    gl_PointSize = 100.0 * gl_VertexID + 4.0;
}

[geometry shader]
layout(triangles) in;
layout(triangle_strip, max_vertices = 4) out;

in gl_PerVertex {
    vec4 gl_Position;
    float gl_PointSize;
} gl_in[];
out vec4 color;

void main()
{
  const vec4 vertices[4] = vec4[4](
    vec4(-1.0, -1.0, 0.0, 1.0),
    vec4(-1.0,  1.0, 0.0, 1.0),
    vec4( 1.0, -1.0, 0.0, 1.0),
    vec4( 1.0,  1.0, 0.0, 1.0)
  );

  bool pass = true;
  for (int i = 0; i < 3; i++) {
    if (gl_in[i].gl_Position != 100.0 * i + vec4(0.0, 1.0, 2.0, 3.0))
      pass = false;
    if (gl_in[i].gl_PointSize != 100.0 * i + 4.0)
      pass = false;
  }

  for (int i = 0; i < 4; i++) {
    gl_Position = vertices[i];
    color = pass ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);
    EmitVertex();
  }
}

[fragment shader]
in vec4 color;

void main()
{
  gl_FragColor = color;
}

[test]
clear color 0.0 0.0 0.0 0.0
clear
draw arrays GL_TRIANGLES 0 3
probe all rgba 0.0 1.0 0.0 1.0
