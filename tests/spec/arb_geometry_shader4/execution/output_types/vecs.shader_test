# Verify that all possible floating point vector types may be used as
# geometry shader inputs.

[require]
GL >= 2.0
GLSL >= 1.10
GL_ARB_geometry_shader4

[vertex shader]
#version 110

attribute vec4 vertex;
attribute float f_in;
varying float f_vs_out;

void main()
{
  gl_Position = vertex;
  f_vs_out = f_in;
}

[geometry shader]
#version 110
#extension GL_ARB_geometry_shader4: enable

varying in float f_vs_out[];
varying out float f;
varying out vec2 v2;
varying out vec3 v3;
varying out vec4 v4;

void main()
{
  for (int i = 0; i < 3; i++) {
    gl_Position = gl_PositionIn[i];
    f = f_vs_out[i];
    v2 = f + vec2(1.0, 2.0);
    v3 = f + vec3(3.0, 4.0, 5.0);
    v4 = f + vec4(6.0, 7.0, 8.0, 9.0);
    EmitVertex();
  }
}

[geometry layout]
input type GL_TRIANGLES
output type GL_TRIANGLE_STRIP
vertices out 3

[fragment shader]
#version 110

varying float f;
varying vec2 v2;
varying vec3 v3;
varying vec4 v4;

void main()
{
  bool ok = true;

  if (distance(v2, f + vec2(1.0, 2.0)) > 0.00001) ok = false;
  if (distance(v3, f + vec3(3.0, 4.0, 5.0)) > 0.00001) ok = false;
  if (distance(v4, f + vec4(6.0, 7.0, 8.0, 9.0)) > 0.00001) ok = false;
  gl_FragColor = ok ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);
}

[vertex data]
vertex/float/2 f_in/float/1
-1.0 -1.0      0
 1.0 -1.0      1
 1.0  1.0      2
-1.0  1.0      3

[test]
draw arrays GL_TRIANGLE_FAN 0 4
probe all rgba 0.0 1.0 0.0 1.0
