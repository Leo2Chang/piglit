# Basic test of the EndPrimitive() function in geometry shaders.
#
# This test uses a vertex shader to render 3 point primitives, and
# then uses a geometry shader to transform each point primitive to a
# horizontal triangle strip with 8 vertices.  Each triangle strip is
# interrupted at a different point using a call to EndPrimitive().
#
# The resulting image should look like this:
#
#   o  o--o--o
#   |\  \ |\ |  (EndPrimitive() called after 3 vertices)
#   | \  \| \|
#   o--o  o--o
#
#   o--o  o--o
#   |\ |  |\ |  (EndPrimitive() called after 4 vertices)
#   | \|  | \|
#   o--o  o--o
#
#   o--o  o--o
#   |\ |\  \ |  (EndPrimitive() called after 5 vertices)
#   | \| \  \|
#   o--o--o  o
#
# The triangles are flatshaded and alternate between gray and white,
# to make it easier to see the triangle boundaries.
#
# At the conclusion of the test, we probe a point in the interior of
# each triangle to verify that only the expected triangles were drawn.

[require]
GL >= 2.0
GLSL >= 1.10
GL_ARB_geometry_shader4

[vertex shader]
#version 110

attribute vec2 origin;
attribute float end_prim_index;

varying vec2 origin_to_gs;
varying float end_prim_index_to_gs;

void main()
{
  gl_Position = vec4(0.0);
  origin_to_gs = origin;
  end_prim_index_to_gs = end_prim_index;
}

[geometry shader]
#version 110
#extension GL_ARB_geometry_shader4: enable

varying in vec2 origin_to_gs[];
varying in float end_prim_index_to_gs[];
uniform float triangle_spacing;

void main()
{
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 2; j++) {
      gl_Position = vec4(origin_to_gs[0] + vec2(i, j) * triangle_spacing,
                         0.0, 1.0);
      gl_FrontColor = vec4(0.5 * float(j + 1));
      EmitVertex();
      if (float(2 * i + j + 1) == end_prim_index_to_gs[0])
        EndPrimitive();
    }
  }
}

[geometry layout]
input type GL_POINTS
output type GL_TRIANGLE_STRIP
vertices out 8

[fragment shader]
#version 110

void main()
{
  gl_FragColor = gl_Color;
}

[vertex data]
origin/float/2  end_prim_index/float/1
-0.75  0.5       3
-0.75 -0.25      4
-0.75 -1.0       5

[test]
uniform float triangle_spacing 0.5
shade model flat
clear color 0.0 0.0 0.0 1.0
clear
draw arrays GL_POINTS 0 3
relative probe rgb (0.2 , 0.825) (0.5, 0.5, 0.5)
relative probe rgb (0.3 , 0.925) (0.0, 0.0, 0.0)
relative probe rgb (0.45, 0.825) (0.0, 0.0, 0.0)
relative probe rgb (0.55, 0.925) (1.0, 1.0, 1.0)
relative probe rgb (0.7 , 0.825) (0.5, 0.5, 0.5)
relative probe rgb (0.8 , 0.925) (1.0, 1.0, 1.0)

relative probe rgb (0.2 , 0.45 ) (0.5, 0.5, 0.5)
relative probe rgb (0.3 , 0.55 ) (1.0, 1.0, 1.0)
relative probe rgb (0.45, 0.45 ) (0.0, 0.0, 0.0)
relative probe rgb (0.55, 0.55 ) (0.0, 0.0, 0.0)
relative probe rgb (0.7 , 0.45 ) (0.5, 0.5, 0.5)
relative probe rgb (0.8 , 0.55 ) (1.0, 1.0, 1.0)

relative probe rgb (0.2 , 0.075) (0.5, 0.5, 0.5)
relative probe rgb (0.3 , 0.175) (1.0, 1.0, 1.0)
relative probe rgb (0.45, 0.075) (0.5, 0.5, 0.5)
relative probe rgb (0.55, 0.175) (0.0, 0.0, 0.0)
relative probe rgb (0.7 , 0.075) (0.0, 0.0, 0.0)
relative probe rgb (0.8 , 0.175) (1.0, 1.0, 1.0)
