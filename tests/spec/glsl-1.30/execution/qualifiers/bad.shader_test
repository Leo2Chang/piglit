# From the GLSL 1.30 spec, p55 (Function Definitions):
#
#   For example,
#
#     vec4 f(in vec4 x, out  vec4 y);
#     vec4 f(in vec4 x, out ivec4 y); // okay, different argument type
#     ...
#
#   Calling the first two functions above with the following argument
#   types yields
#
#     ...
#     f(ivec4, vec4)  // error, convertible to both
#
# This test verifies that the call f(ivec4, vec4) generates an error.

[require]
GLSL >= 1.30

[vertex shader]
#version 130
vec4 f(in vec4 x, out ivec4 y)
{
  y = ivec4(0);
  return vec4(0.0);
}

vec4 f(in vec4 x, out vec4 y)
{
  // Verify that the correct values were passed in.
  if (x != vec4(1.0, 3.0, 3.0, 7.0)) {
    // They weren't, so output zeros
    y = vec4(0.0);
    return vec4(0.0);
  } else {
    // They were, so output some constants the caller can recognize.
    y = vec4(5.0, 10.0, 15.0, 20.0);
    return vec4(1.0, 0.5, 0.25, 0.125);
  }
}

void main()
{
  gl_Position = gl_Vertex;

  // Call f, passing it the input it expects.
  ivec4 x_actual = ivec4(1, 3, 3, 7);
  vec4 y_actual;
  vec4 f_result = f(x_actual, y_actual);

  // Check that the outputs are as expected.
  if (y_actual == vec4(5.0, 10.0, 15.0, 20.0)
      && f_result == vec4(1.0, 0.5, 0.25, 0.125)) {
    gl_FrontColor = vec4(0.0, 1.0, 0.0, 1.0); // Green
  } else {
    gl_FrontColor = vec4(1.0, 0.0, 0.0, 1.0); // Red
  }
}

[fragment shader]
#version 130
void main()
{
  gl_FragColor = gl_Color;
}

[test]
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0
