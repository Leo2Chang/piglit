from builtin_function import *
import numpy
import os.path

this_file = os.path.basename(__file__)

def format_test_cases(function_name, test_cases):
    for arguments, expected_result in test_cases:
	arg_str = ', '.join(glsl_constant(arg) for arg in arguments)
	value_str = '{0}({1})'.format(function_name, arg_str)
	yield value_str, expected_result

def split_test(test_case):
    value_str, expected_result = test_case
    if isinstance(expected_result, numpy.ndarray):
	for elem in xrange(expected_result.shape[-1]):
	    e = expected_result[...,elem]
	    if e.shape == ():
		e = e.tolist()
	    yield '{0}[{1}]'.format(value_str, elem), e
    else:
	yield value_str, expected_result

def split_matrices(test_cases):
    for value_str, expected_result in test_cases:
	if isinstance(expected_result, numpy.ndarray) and \
		len(expected_result.shape) > 1:
	    for subtest in split_test((value_str, expected_result)):
		yield subtest
	else:
	    yield value_str, expected_result

def make_booleans(test_cases, use_all_and_equal, use_length):
    for value_str, expected_result in test_cases:
	if isinstance(expected_result, (bool, numpy.bool_)):
	    yield value_str, expected_result
	elif isinstance(expected_result, numpy.ndarray) and \
		expected_result.dtype == bool:
	    if use_all_and_equal:
		yield 'all(equal({0}, {1}))'.format(
		    glsl_constant(expected_result), value_str), True
	    else:
		for subtest in split_test((value_str, expected_result)):
		    yield subtest
	else:
	    if use_length:
		yield 'length({0} - {1}) < 0.001'.format(
		    glsl_constant(expected_result), value_str), True
	    else:
		for sub_value_str, sub_expected_result in \
			split_test((value_str, expected_result)):
		    yield '{0} < {1}'.format(value_str, glsl_constant(expected_result + 0.001)), True
		    yield '{0} < {1}'.format(glsl_constant(expected_result - 0.001), value_str), True

def make_array_lengths(test_cases):
    for value_str, expected_result in test_cases:
	assert isinstance(expected_result, (bool, numpy.bool_))
	if expected_result:
	    yield '{0} ? 1 : -1'.format(value_str)
	else:
	    yield '{0} ? -1 : 1'.format(value_str)

for function_name, test_suite in test_suites.items():
    for types, test_cases in test_suite.items():
	for shader_type in ('vert', 'frag'):
	    if shader_type == 'vert':
		output_var = 'gl_Position '
	    else:
		output_var = 'gl_FragColor'
	    filename = 'glsl-1.20/compiler/built-in-functions/const-{0}-{1}.{2}'.format(
		function_name, '-'.join(types), shader_type)
	    with open(filename, 'w') as f:
		f.write('/* [config]\n')
		f.write(' * expect_result: pass\n')
		f.write(' * glsl_version: 1.20\n')
		f.write(' * [end config]\n')
		f.write(' * Automatically generated by {0}\n'.format(this_file))
		f.write(' */\n')
		f.write('#version 120\n')
		f.write('\n')
		formatted_test_cases = list(format_test_cases(function_name, test_cases))
		vector_test_cases = list(split_matrices(formatted_test_cases))
		use_length = function_name != 'length'
		use_all_and_equal = function_name not in ('all', 'equal')
		bool_test_cases = list(make_booleans(vector_test_cases, use_all_and_equal, use_length))
		array_lengths = list(make_array_lengths(bool_test_cases))
		for i, array_length in enumerate(array_lengths):
		    f.write('float[{0}] array{1};\n'.format(array_length, i))
		f.write('\n')
		f.write('main()\n')
		f.write('{\n')
		array_length_getters = [
		    'array{0}.length()'.format(i) for i in xrange(len(array_lengths))]
		array_length_sum = '\n			    + '.join(array_length_getters)
		f.write('  {0} = vec4({1});\n'.format(
			output_var, array_length_sum))
		f.write('}\n')
