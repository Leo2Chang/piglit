[require]
GLSL >= 1.10
GL >= 2.1

[vertex shader]
void main()
{
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
	gl_FrontColor = gl_Color;
	gl_FrontSecondaryColor = gl_SecondaryColor;
}

[fragment shader]
uniform bool use_primary;

void main()
{
	if (use_primary)
		gl_FragColor = gl_Color;
	else
		gl_FragColor = gl_SecondaryColor;
}

[vertex data]
gl_Vertex/float/3 gl_Color/ubyte/3 gl_SecondaryColor/ubyte/3
0.0 0.0 0.0       0xff 0x00 0x00   0x00 0xff 0xff
0.0 1.0 0.0       0x00 0xff 0x00   0xff 0x00 0xff
1.0 0.0 0.0       0x00 0x00 0xff   0xff 0xff 0x00
1.0 1.0 0.0       0xff 0x00 0x00   0x00 0xff 0xff

[test]
ortho 0.0 1.0 0.0 1.0
clear color 0.0 0.0 0.0 0.0
clear
uniform int use_primary 1
draw arrays GL_TRIANGLES 0 3
uniform int use_primary 0
draw arrays GL_TRIANGLES 1 3
relative probe rgba (0.1, 0.1) (0.8, 0.1, 0.1, 1.0)
relative probe rgba (0.1, 0.5) (0.4, 0.5, 0.1, 1.0)
relative probe rgba (0.5, 0.1) (0.4, 0.1, 0.5, 1.0)
relative probe rgba (0.5, 0.9) (0.6, 0.5, 0.9, 1.0)
relative probe rgba (0.9, 0.5) (0.6, 0.9, 0.5, 1.0)
relative probe rgba (0.9, 0.9) (0.2, 0.9, 0.9, 1.0)